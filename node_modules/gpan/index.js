var http = require('http')
,	fs = require('fs')
,	exec = require('child_process').exec;

exports.version = '1.0.00';

var homeRoot = process.cwd() + '/';

var store = {
	zoom_level:null,
	path_to_tiles:null,
	tiles_prefix:null,
	path_to_image:null,
	image_name:null,
	delete_tiles:false
};

var set = function(key, value) {	
	store[key] = value;	
}
exports.configure = function(fn) {
	fn(set);
}

// exports.savePanorama = function(panoId, zoomLevel, pathToSaveTiles, tilesPrefix, pathToSaveImage, finalImageName, deleteTiles, cb) {
exports.savePanorama = function(panoId, cb) {

	if(store.zoom_level && store.zoom_level >= 0 && store.zoom_level <=5) {
		if(store.path_to_tiles) {
			if(store.path_to_image) {
				if(store.image_name) {
					validateDirectories(store.path_to_tiles, store.path_to_image, function(error, tilesPath, imagePath) {
						if(error) {
							cb(error, null);
						} else {
							var panoramaRule = getPanoramaZoom(store.zoom_level);
							var currentImageNum = 0;

							for(var y =0; y <= panoramaRule.y; y++) {
					           for(var x =0; x <= panoramaRule.x; x++) {
					              currentImageNum++;
					              saveTile(panoId, x, y, panoramaRule.zoom, padNumber(currentImageNum, 3), tilesPath, store.tiles_prefix, function(_x, _y) {            
					                if(_x == panoramaRule.x && _y == panoramaRule.y) {
					                	exec('montage ' + tilesPath + store.tiles_prefix + '*.jpg -tile ' + (panoramaRule.x + 1) + 'x' + (panoramaRule.y + 1) + ' -geometry 512x512 -quality 100 ' + imagePath + store.image_name  + '.jpg', function(err, stdout, stderr) { 	                		
					                		cb(err, imagePath + store.image_name  + '.jpg');
					                		if(store.delete_tiles) {
					                			currentImageNum = 0;
					                			for(var y =0; y <= panoramaRule.y; y++) {
					           						for(var x =0; x <= panoramaRule.x; x++) {
					           							currentImageNum++;
					                					fs.unlinkSync(tilesPath + store.tiles_prefix + padNumber(currentImageNum, 3) + '.jpg')
					                				}
					                			}
					                		}
					                	});
					                }                  
					              });
					            }
					        }  
						}
					});
				} else {
					cb('image_name is missing', null);
				}		
			} else {
				cb('path_to_image is missing', null);
			}
		} else {
			cb('path_to_tiles is missing', null);
		}
	} else {
		cb('zoom_level is missing', null);
	}	
}

var saveTile = function(panoId, x, y, zoom, imageNumber, tilesPath, tilesPrefix, cb) {
  var options = {
    host: 'cbk0.google.com',
    port: 80,
    path: '/cbk?output=tile&zoom=' + zoom + '&x=' + x + '&y=' + y + '&panoid=' + panoId        
  };
  
  var savePath = global.root + 'public/panoramas/' + panoId;
  
  //console.log('image ' + x + ',' + y + ' on panorama ' + panoId + ' saved!')  

  http.get(options, function(resp){
    resp.setEncoding('binary');
    var image = '';
    resp.on('data', function(chunk){
      //do something with chunk
      image += chunk;
    });
    resp.on('end', function(r) {
      //fs.writeFile(savePath + '/'+ x + ',' + y + '.jpg', image, 'binary', function(err){
      fs.writeFile(tilesPath + tilesPrefix + imageNumber + '.jpg', image, 'binary', function(err){
        if (err) console.log("Got error: " + err);        
        cb(x, y);
      });
    });
  }).on("error", function(e){
    console.log("Got error: " + e.message);
  });
}

var validateDirectories = function(pathToSaveTiles, pathToSaveImage, cb) {
	var tilesPath = null;
	var imagePath = null;

	validatePath(pathToSaveTiles, function(error, finalPath) {
		if(error) {
			cb(error, null);
		} else {
			tilesPath = finalPath;
			validatePath(pathToSaveImage, function(error, finalPath) {
				if(error) {
					cb(error, null);
				} else {
					imagePath = finalPath;
					cb(null, tilesPath, imagePath);
				}
			});
		}
	});
}

var validatePath = function(path, cb) {
	var parts = path.split('/');
	var wantedPath = '';

	parts.clean('');
	
	if(parts.length >= 0) {			
		createDirectories(parts, function(err, finalPath) {
			cb(err, finalPath);
		});
	} else {		
		cb(null, homeRoot);
	}

	function createDirectories(parts, done) {
		var part = parts[0];
		wantedPath += part + '/';
		parts.shift();

		fs.exists(homeRoot + wantedPath, function(exists){
			if(exists) {
				if(parts.length > 0) {
					createDirectories(parts, done);
				} else {
					done(null, homeRoot + wantedPath);
				}
			} else {
				fs.mkdir(homeRoot + wantedPath, function(error) {
					if(error) {
						done({error:error}, homeRoot + wantedPath)
					} else {
						if(parts.length > 0) {
						createDirectories(parts, done);
						} else {
							done(null, homeRoot + wantedPath);
						}	
					}					
				});
			}
	 	});
	}
}

Array.prototype.clean = function(deleteValue) {
  for (var i = 0; i < this.length; i++) {
    if (this[i] == deleteValue) {         
      this.splice(i, 1);
      i--;
    }
  }
  return this;
};

var getPanoramaZoom = function(zoom) {
  var rule = {};

  switch(zoom) {
    case 0:
      rule = {
        zoom:0,
        x:0,
        y:0
      }
    break;
    case 1:
      rule = {
        zoom:1,
        x:1,
        y:0
      }
    break;
    case 2:
      rule = {
        zoom:2,
        x:3,
        y:1
      }
    break;
    case 3:
      rule = {
        zoom:3,
        x:6,
        y:3
      }
    break;
    case 4:
      rule = {
        zoom:4,
        x:12,
        y:6
      }
    break;
    case 5:
      rule = {
        zoom:5,
        x:25,
        y:12
      }
    break;
    default:
      rule = {
        zoom:0,
        x:0,
        y:0
      }
    break;
  }

  return rule;
}

var padNumber = function(n, width, z) {
  z = z || '0';
  n = n + '';
  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}